What is Git?
Version Control System is a tool that helps to track changes in code
Git is a Version Control System. It is
	popular
	free & Open Source
	fast & scalable

Features of Git:
	track the history
	collaborate

What is GitHub?
Website that allows developers to store and manage their code using git.

Github Account
	Create a new repository: apnacollege-demo
	Make our first commit(finalize changes)
	first we change (add)
	second commit

Setting up Git:
	Linux - "apt install git"
	Mac - find yourself
	Windows - find yourself

Configuring Git:
	git config --global user.name "sonoou"
	git config --global user.email "sonu26681094@gmail.com"
	git config --list

Git Clone & Status:
	Clone - Cloning a repository on our local machine
			git clone <- repository link ->

	status - display the state of the code
			git status

Two step process (After modifying):
	1. add
	2. commit

Four types of git status:
	1. untracked - new files that git doesn't yet track even
					you make changes it is still untracked

	2. modified - changed

	3. staged - file is ready to be committed

	4. unmodified - files in your git repo and the files in
					machine are same or after commit

Add & Commit:
	add - adds new or changed files in your working directory
			to the Git staging area.
			git add <- file name ->

	commit - it is the record of change
				git commit -m "some message"
				Note: message must be meaningful

Push command:
	push - upload local repo content to remote repo
			git push origin main

			This command will ask you for username &
			password

			Note: give PAT instead of password(new version)

			How to get PAT:
				git login -> click on profile -> settings -> 
				Developer settings -> Personal access token ->
				Tokens (classic) -> generate & give permission ->
				Generate token

			if you don't want to give token again and again use:
				git config --global credential.helper cache 
				(next push or pull ask you for username & password only once)
			
			To remove this:
				git config --global --unset credential.

Init Command:
	init - used to create a new git repo
			git init
			git remote add origin <- link of new repo ->
			git remove -v (to verify remote)
			git branch (to check branch)
			git branch -M <- name off branch ->
			git push -u origin main

Git Branches:

					Features
                       ↓
           ┌---○---○---○
	○---○--┴---○---○
				   ↑
				Master

	git branch  (to check branch)
	git branch -M  (to rename branch)
	git checkout <-branch name->  (to navigate)
	git checkout -b <-branch name->  (create new branch)
	git branch -d <-branch name-> (to delete branch)

Merging Code:
	Way 1: 
		git diff <-branch name-> (to compare commits, branches,files & more)
		git merge <-branch name->

	Way 2:
		Create a PR(Pull Request)

		Pull Request:
			It lets you tell others about changes you've
			pushed to a branch i a repsitory on GitHub.

Pull Command:
	git pull origin main

	used to fetch and download content from a remote repo
	and immediately update the local repo to match the content

Resolving Merge Conflicts:
	An event that taked place when Git is unable to automatically
	resolve differences in code between two commits.

Undoing Changes:
	Case 1: staged changes
			git reset <-file name->
			git reset

	Case 2: commited changes (for one commit)
			git reset HEAD~1

	Case 3: commited changes (for manu commits)
			git reset <-commit hash->
			git reset --hard <-commit hash->

Fork:
	A fork is a new repository that shares code and visibility
	settings with the original'upstream'
	repository.
	Fork is a rough copy.