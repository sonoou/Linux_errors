########################
## Collection Methods ##
########################

## Collection interface(Available in every class)
	public boolean add(Object o)
	public boolean addAll(Collection c)
	public void clear()
	public boolean contains(Object o)
	public boolean isEmpty()
	public Iterator iterator()
	public boolean remove(Object o)
	public int size()
	public Object[] toArray()

## Iterator interface
	public boolean hasNext()
	public Object next()
	public Object remove() //2removes the element returned by next()

## ListIterator interface
	public boolean hasNext()
	public Object next()
	public Object remove()
	public boolean hasPrevious()
	public Object previous()
	public int nextIndex()
	public int previousIndex()

	public void add(Object o): insert the new object immediately before the
	                           element which would be returned by the next() 
	                           method.

	public void set(Object o): replaces the last element in the list
	                           retrieved by a next() or previous() operation

## Enumeration interface
	public boolean hasMoreElements()
	public Object nextElement()

## List interface
	public void add(int index, Object o)
	public boolean addAll(int index, Collection c)
	public Object get(int index)
	public ListIterator listIterator()
	public Object remove(int index)
	public Object set(int index, Object o)

## ArrayList<E> class
    public void add(Object o)
    public void remove(int index)
    public int size()
    public Object[] toArray()
    public <T> T[] toArray(T[] a)
    public E get(int index)
    public boolean contains(Object o)
    public void ensureCapacity(int minCapacity)
    public List<E> subList(int fromIndex, int toIndex) // toIndex excluded
    public void trimToSize()
    public Iterator<E> iterator()
    public void sort(Comparator<? super E> c)
    public ListIterator<E> listIterator()
    public ListIterator<E> listIterator(int index) 

## Vector class
	public Vector(int initialCapacity, int capacityIncrement)
	public synchronized void addElement(E obj)
	public synchronized void ensureCapacity(int minCapacity)
	public synchronized int capacity()
	public synchronized int size()
	public synchronized void trimToSize()
	public Enumeration<E> elements()
	public synchronized void removeElementAt(int index)
	public synchronized Iterator<E> iterator()
	public synchronized ListIterator<E> listIterator()
	public synchronized void copyInto(Object[] anArray)

## LinkedList class
    public boolean add(E e) // adds at last, calls linkLast(e)
    public void add(int index, E element)
    public void addFirst(E e)
    public E get(int index) 
    public E set(int index, E element)
    public E removeFirst()
    public E removeLast()
    public boolean remove(Object o)//removes first occurence of specific element
    public E remove(int index) //removes at specific index
    public boolean removeFirstOccurrence(Object o) //calls remove(Object o)
    public boolean removeLastOccurrence(Object o)
    public E getFirst()
    public E getLast() //returns the last element if empty then exception
    public E peekLast()//returns the last element if empty then null
    public void push(E e) // calls addFirst()
    public E pop() // calls removeLast()
    public int size()
    public Iterator<E> iterator()
    public Iterator<E> descendingIterator()

## Map interface
    public Object put(Object key, Object value) - returns value
    public Object remove(Object key)
    public int size()
    public Collection values()
    public Set keySet()
    public Object get(Object key)
    pubilc boolean isEmpty()
    public void clear()
    public boolean containsKey(Object key)
    public void putAll(Map m)
    public Set entrySet() 

## HashMap class

	public V put(K key, V value) -> returns previously associated value in Object form 
	                                that is associated with the same key if returns null
                                    then no mapping or previously with null.

    

## Collections class
	public static void reverse(List<?> list)
	public static void shuffle(List<?> list)
	public static void swap(List<?> list, int i, int j)
	public static <T> List<T> synchronizedList(List<T> list)
	public static <T extends Comparable<? super T>> void sort(List<T> list)
	public static <T> void sort(List<T> list, Comparator<? super T> c)

		Collection's sort method calls ArrayList's sort method
		Java is making fool of us

	public synchronized ListIterator<E> listIterator()
	public synchronized ListIterator<E> listIterator(int index)

## Arrays class
	public static <T> List<T> asList(T... a)
	clone();
	System.arracopy(pre_array,0,new_array,0,number_of_element_to_copy);
	public static void fill(double[] a, double val)
	public static void fill(double[] a, int fromIndex, int toIndex,double val)
	        toIndex excluded and works with any data type

	public static void sort(double[] a)
	public static void sort(double[] a, int fromIndex, int toIndex)
	        toIndex excluded and works with any data type
	public static <T> void sort(T[] a, Comparator<? super T> c)
	public static int binarySearch(short[] a, short key)
	public static int binarySearch(short[] a, int fromIndex, int toIndex, short key)
	       toIndex excluded, 
	       works with any data type, 
	       must be called after calling sort 
	       (class == isUserDefined)?implement Comparable

	public static <T> T[] copyOf(T[] original, int newLength)
	public static boolean equals(int[] a, int[] a2)
	Array.getLength(any array);
	(int[])Array.newInstance(int.class,5)


SELECT * FROM (SELECT * FROM employee ORDER BY id DESC LIMIT 2) AS temp1 ORDER BY id ASC LIMIT 1;